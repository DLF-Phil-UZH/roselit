<?php

class Document_list_mapper extends CI_Model {

	private $tableName = "documentLists"; // Name of database table
    private $docToListTable = "documents_documentLists"; // Name of mapping table
    private $doclistToAdminsTable = "documents_admins";
	
	public function __construct(){
		parent::__construct();
		$this->load->database();
	}

	public function save(Document_list_model $pDocList){
		// Table "documentLists"
		$lData = array("title" => $pDocList->getTitle(),
					   "creator" => $pDocList->getCreator()->getId(),
					   // "admin" => $pDocList->getAdmin()->getId(),
					   "published" => (int) $pDocList->getPublished()
                   );
		if($pDocList->isNew()){
			$lData["created"] = null;
			$this->db->insert($this->tableName, $lData);
			$pDocList->setId($this->db->insert_id()); // Add id generated by database to the doc list object
		}
		else{
			$this->db->where("id", $pDocList->getId());
			$this->db->update($this->tableName, $lData);
		}
		
		// Table "documents_documentLists"
		$lDocListId = $pDocList->getId();
		// Delete all mapping entries
		$this->db->delete($this->docToListTable, array("documentListId" => $lDocListId)); 
		$lListData = array();
		foreach($pDocList->getDocumentIds() as $lDocumentId){
			$lListData[] = array("documentListId" => $lDocListId,
								 "documentId" => $lDocumentId);
        }
        if (count($listData) > 0) {
		    // Rewrite all mapping entries
            $this->db->insert_batch($this->docToListTable, $lListData);
        }

        // $this->db->delete($this->doclistToAdminsTable, array("documentListId" => $lDocListId)); 
        // $admins = $pDocList->getAdmins();
        // $insertData = array();
		// foreach($admins as $userId => $user){
		// 	$insertData[] = array("documentListId" => $lDocListId,
		// 						 "userId" => $userId);
		// }
        // $this->db->insert_batch($this->doclistToAdminsTable, $insertData);
	}

	public function delete(Document_list_model $pDocList){
		if(!($pDocList->isNew())){
			$this->db->delete($this->tableName, array("id" => $pDocList->getId()));
			$this->db->delete($this->docToListTable, array("documentListId" => $pDocList->getId()));
		}
	}
	
	// Expects the ID of an existing document list
	public function get($pId){
		$lQuery = $this->db->get_where($this->tableName, array("id" => $pId));
		if($lQuery->num_rows() == 1){
			$lResult = $lQuery->row();
			$lDocList = new Document_list_model($lResult->title, $lResult->creator);
			$lDocList->setId($lResult->id);
			// $lDocList->setAdmin($lResult->admin);
			$lDocList->setLastUpdated(new DateTime($lResult->lastUpdated));
			$lDocList->setCreated(new DateTime($lResult->created));
			$lDocList->setPublished((bool) $lResult->published);

            // add creator and admins:
            $this->load->model("User_mapper");
            $lCreator = $this->User_mapper->get($lResult->creator);
            if ($lCreator === false) {
                throw Exception('User with id '. $lResult->creator . ' not found in database.');
            }
            $lDocList->setCreator($lCreator);
            $lAdmins = $this->User_mapper->getByDocumentListId($pId);
            foreach ($lAdmins as $lAdmin) {
                $lDocument->addAdmin($lAdmin);
            }

			// Add documents to the list
			$this->load->model("Document_mapper");
			$lDocuments = $this->Document_mapper->getByListId($pId);
			foreach($lDocuments as $lDocument){
				$lDocList->addDocument($lDocument);
			}
            return $lDocList;
		}
        return false;
	}

}

